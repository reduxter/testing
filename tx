%macro analyze_diff_fields;

    /* Step 1: Retrieve the list of 'Diff_' columns and 'Type' values from the dataset */
    proc sql noprint;
        select name into :diff_fields separated by ' '
        from dictionary.columns
        where libname = 'YOUR_LIB' /* Change 'YOUR_LIB' to your actual library name */
          and memname = 'YOUR_TABLE' /* Change 'YOUR_TABLE' to your actual table name */
          and upcase(name) like 'DIFF_%';
          
        select distinct type into :type_values separated by ' '
        from YOUR_LIB.YOUR_TABLE; /* Change YOUR_LIB.YOUR_TABLE to your actual library and table name */
    quit;

    %let num_diff_fields = %sysfunc(countw(&diff_fields));
    %let num_types = %sysfunc(countw(&type_values));
    
    /* Step 2: Loop over each 'Type' value and 'Diff_' field */
    %do t = 1 %to &num_types;
        %let current_type = %scan(&type_values, &t);
        
        %do d = 1 %to &num_diff_fields;
            %let current_diff_field = %scan(&diff_fields, &d);
            %let field_name = %sysfunc(substr(&current_diff_field, 6)); /* Extract the field name after 'Diff_' */
            
            /* Extract YYMM and Compared_YYMM values for the current type */
            proc sql noprint;
                select YYMM, Compared_YYMM into :curr_yymm, :prev_yymm
                from YOUR_LIB.YOUR_TABLE
                where type="&current_type";
            quit;
            
            /* Step 3: Run SQL1 to identify new or deleted records for each field */
            proc sql;
                create table work.flags_&current_type._&field_name as
                select B.&prev_yymm as Prev_YYMM, A.&field_name as &field_name._&prev_yymm, B.&field_name as &field_name._&curr_yymm,
                       case 
                         when B.&field_name is null then 'DELETED'
                       end as FLAG 
                from (select YYMM, &field_name from YOUR_LIB.DB1 where YYMM = "&prev_yymm" group by YYMM, &field_name) as A
                full join (select YYMM, &field_name from YOUR_LIB.DB1 where YYMM= "&curr_yymm" group by YYMM, &field_name) as B
                on trim(upper(A.&field_name)) = trim(upper(B.&field_name))
                where FLAG in ('DELETED', 'NEW');
            quit;
            
            /* Step 4: Get the field values that were flagged as NEW or DELETED */
            proc sql noprint;
                select &field_name into :field_values separated by ' '
                from work.flags_&current_type._&field_name;
                select count(*) into :num_records from work.flags_&current_type._&field_name;
            quit;
            
            /* Step 5: Loop over the field values to run SQL2 to SQL4 */
            %do n = 1 %to &num_records;
                %let field_value = %scan(&field_values, &n);

                /* SQL2: Use the FIELD_VALUE to get details from TXN_TBL */
                proc sql;
                    create table work.details_&current_type._&field_name._&n as
                    select KEYID, &field_name 
                    from YOUR_LIB.TXN_TBL
                    where YYMM = "&curr_yymm"
                      and FIELD = "&field_value"; /* Use the field value obtained from SQL1 */
                quit;
                
                /* ... Repeat similar steps for SQL3 and SQL4 using the field value from SQL1 ... */
                
            %end; /* End of loop for SQL2 to SQL4 */

        %end; /* End of loop for 'Diff_' fields */
    %end; /* End of loop for 'Type' values */

%mend analyze_diff_fields;

%analyze_diff_fields;


%macro run_queries(Type, YYMM, Compared_YYMM, Diff_Product, Diff_Channel);
    /* Your SQL template would go here, using the macro parameters */
    /* Example: */
    proc sql;
        select * from &Type.
        where YYMM = &YYMM. and Compared_YYMM = &Compared_YYMM.
        /* Additional query logic using Diff_Product and Diff_Channel */
    quit;
%mend run_queries;

data _null_;
    set your_dataset;
    call execute(cats('%run_queries(', Type, ',', YYMM, ',', Compared_YYMM, ',', Diff_Product, ',', Diff_Channel, ')'));
run;


%macro export_to_excel_with_title(dataset, sheet_name, title);

    ods excel file="path_to_your_existing_excel_file.xlsx" /* Path to your Excel file */
        options(sheet_name="&sheet_name" sheet_interval="none");

    /* Add a title */
    ods text="&title";

    /* Print the dataset */
    proc print data=&dataset noobs;
    run;

    ods excel close;

%mend export_to_excel_with_title;

/* Example of calling the macro */
%export_to_excel_with_title(work.details_General_Product_1, "General_Product_1", "General Product Analysis for 2024");

