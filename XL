import openpyxl
import xlwings as xw
import re
from openpyxl.utils import get_column_letter

def extract_references_from_formula(formula):
    """Extract cell references from a formula, including ranges."""
    return re.findall(r'[A-Z]+[0-9]+', formula)

def process_range(sheet, cell_range):
    """Process a cell range and return a list of cell references."""
    cells = []
    start_cell, end_cell = cell_range.split(':')
    start_row, start_col = openpyxl.utils.cell.coordinate_to_tuple(start_cell)
    end_row, end_col = openpyxl.utils.cell.coordinate_to_tuple(end_cell)
    
    for row in range(start_row, end_row + 1):
        for col in range(start_col, end_col + 1):
            cells.append(f"{get_column_letter(col)}{row}")
    
    return cells

def trace_formula_path(excel_app, workbook, sheet_name, cell_reference, path=None):
    """Recursively traces the formula path until a raw value is found."""
    if path is None:
        path = []

    try:
        sheet = workbook.sheets[sheet_name]
        cell = sheet[cell_reference]
        formula = cell.formula if cell.formula else None
        
        if formula:
            path.append((workbook.name, sheet_name, cell_reference, formula))
            references = extract_references_from_formula(formula)
            
            for ref in references:
                if "!" in ref:
                    ref_sheet_name, ref_cell = ref.split("!")
                else:
                    ref_sheet_name, ref_cell = sheet_name, ref
                
                # Check if the reference is a range or single cell
                if ':' in ref_cell:
                    for cell_in_range in process_range(sheet, ref_cell):
                        trace_formula_path(excel_app, workbook, ref_sheet_name, cell_in_range, path)
                else:
                    trace_formula_path(excel_app, workbook, ref_sheet_name, ref_cell, path)
        else:
            # Evaluate the formula using Excel to get the actual value
            value = cell.value
            path.append((workbook.name, sheet_name, cell_reference, value))
    except Exception as e:
        path.append((workbook.name, sheet_name, cell_reference, f"Error: {str(e)}"))
    
    return path

def trace_workbook(excel_app, workbook_path, sheet_name, cell_range):
    """Traces all cells in the given range and outputs the nesting details."""
    workbook = excel_app.books.open(workbook_path)
    sheet = workbook.sheets[sheet_name]
    
    nesting_details = {}
    
    for row in sheet[cell_range]:
        for cell in row:
            cell_reference = cell.address
            nesting_details[cell_reference] = trace_formula_path(excel_app, workbook, sheet_name, cell_reference)
    
    workbook.close()
    return nesting_details

# Example Usage
workbook_path = r"\\network_drive\path\to\your_workbook.xlsx"
sheet_name = "Sheet1"
cell_range = "A1:B2"  # Example range

# Initialize Excel application
excel_app = xw.App(visible=False, add_book=False)

try:
    nesting_details = trace_workbook(excel_app, workbook_path, sheet_name, cell_range)

    # Output the details
    for cell, details in nesting_details.items():
        print(f"Nesting details for cell {cell}:")
        for detail in details:
            print(f"Workbook: {detail[0]}, Sheet: {detail[1]}, Cell: {detail[2]}, Formula/Value: {detail[3]}")
        print("\n")
finally:
    # Ensure Excel application is closed properly
    excel_app.quit()
