import re
import pandas as pd
from teradataml import create_context, remove_context, execute
from sqlalchemy.exc import DatabaseError

# User ID
user_id = "your_username"

# Connect to Teradata
create_context(host="your_host", username=user_id, password="your_password")

# Read your SQL script and split by lines
with open("your_sql_script.sql", "r") as file:
    sql_script_lines = file.readlines()

# Regex for table references and comments
pattern = re.compile(r'from\s+([\w.]+(?:_\?\w+)?\b)', re.IGNORECASE)
comment_pattern = re.compile(r'--.*$')

# Function to remove in-line comments
def remove_inline_comments(line):
    return comment_pattern.sub('', line)

# Process the SQL script
placeholders = set()
table_references = {}

for line_number, line in enumerate(sql_script_lines, 1):
    if line.strip().startswith('--'):  # Skip full line comments
        continue
    line = remove_inline_comments(line)  # Remove in-line comments
    for match in pattern.finditer(line):
        table_reference = match.group(1)
        placeholders.update(re.findall(r'_(\?\w+)', table_reference))
        table_references.setdefault(table_reference, []).append(line_number)

# Prompt user for each placeholder value
placeholder_values = {placeholder: input(f"Enter the value for {placeholder}: ") for placeholder in placeholders}

results = []

# Check access for each table
for table, line_numbers in table_references.items():
    table_with_replaced_placeholders = replace_placeholders(table)
    database, table_name = table_with_replaced_placeholders.split('.')
    access_granted = True
    try:
        execute(f"SELECT TOP 1 * FROM {table_with_replaced_placeholders}")
    except DatabaseError as e:
        if "access" in str(e).lower():  # Check if the error message indicates an access issue
            access_granted = False
    for line_number in line_numbers:
        results.append({
            "UserID": user_id,
            "Row number": line_number,
            "Database": database,
            "TableName": table_name,
            "Access": "Yes" if access_granted else "No"
        })

# Clean up context
remove_context()

# Output to Excel
df = pd.DataFrame(results)
excel_filename = "access_report.xlsx"
df.to_excel(excel_filename, index=False)

print(f"Access report saved to {excel_filename}")
